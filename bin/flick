#!/usr/bin/env ruby
require_relative '../lib/flick'
require 'commander/import'
require 'digest'

program :version, '0.4.6'
program :description, 'A CLI to capture screenshots, video, logs, and device info for Android (Devices & Emulators) and iOS (Devices).'

command :video do |c|
  c.syntax = 'flick video [options]'
  c.description = 'Record video'
  c.example 'description', "flick video -a start -p android -e true -u TA64300B9C\n    flick video -a stop -p android -n my-video -o /mydir"
  c.option '-a', '--action ACTION', String, 'Set action: start or stop'
  c.option '-p', '--platform PLATFORM', String, 'Set platform: android or ios'
  c.option '-u', '--udid UDID', String, 'Set device UDID. Defaults to only connected device per platform'
  c.option '-s', '--seconds SECONDS', String, 'Set the seconds per screenshot. Default: 0.5'
  c.option '-c', '--count COUNT', Integer, 'Set maximum number of screenshots. Default: 500'
  c.option '-e', '--extend EXTEND', 'Extend android video past 180 seconds SDK limit. e.g. -e true .Default: false'
  #The options below are relavent to the stop action...
  c.option '-n', '--name NAME', String, 'Set name of output file, Default: UDID'
  c.option '-q', '--unique UNIQUE', 'Pull only unique screenshots. Significantly speeds up the pulling process. Default: true'
  c.option '-f', '--format FORMAT', String, 'Set output format (mp4 or gif). Default: mp4'
  c.option '-r', '--rate RATE', String, 'Set the framerate (in seconds) when converting screenshots to video. Default: 1'
  c.option '-o', '--outdir OUTDIR', String, "Set output directory. Default is #{Dir.pwd}"
  c.option '--use_screenshots', "Use screenshot instead of screenrecord to create final video. Use it on devices with limited space. Default: false"
  c.action do |args, options|
    options.default \
    :seconds => 0.5, #Seconds per screenshot.
    :rate => 1, #Seconds per framerate for screenshot to video conversion.  
    :count => 500, #This is a safety check to stop runaway screenshot process.
    :extend => false, #Extend android video recording (for REAL devices and os >= 4.4) past 180 seconds.
    :unique => true, #defaults to pulling only unique screenshots. Speeds up pulling process from device.
    :format => "mp4",
    :outdir => Dir.pwd, #defaults to save in current directory.
	:use_screenshots => false # By default use screenrecord to record Android activity
    Video.new(options.default).run
  end
end

command :screenshot do |c|
  c.syntax = 'flick screenshot [options]'
  c.summary = 'Take a screenshot'
  c.description = c.summary
  c.example 'description', 'flick screenshot -p ios'
  c.option '-p', '--platform PLATFORM', String, 'Set platform: android or ios'
  c.option '-u', '--udid UDID', String, 'Set device UDID.'
  c.option '-n', '--name NAME', String, "Set name of output file. Default: UDID"
  c.option '-o', '--outdir OUTDIR', String, "Set output directory. Default is #{Dir.pwd}"
  c.action do |args, options|
    options.default \
    :outdir => Dir.pwd #defaults to save in current directory.
    Screenshot.new(options.default).screenshot
  end
end

command :applitools do |c|
  c.syntax = 'flick applitools [options]'
  c.summary = 'Validate images with Applitools'
  c.description = c.summary
  c.example 'description', "flick applitools -p android --appName Twitter --testName Messages"
  c.option '-p', '--platform PLATFORM', String, 'Set platform: android or ios'
  c.option '-u', '--udid UDID', String, 'Set device UDID.'
  c.option '-o', '--outdir OUTDIR', String, "Set output directory. Default: #{Dir.pwd}"
  c.option '--keep', "Keep image after capture."
  c.option '--appName appName', String, "Set your App Name. Example: --appName Twitter. Default is the platform value"
  c.option '--testName testName', String, "Set Test Name. Example: --testName 'Home View'"
  c.option '--autoSave autoSave', String, "Automatically save failed tests."
  c.option '--apiKey apiKey', String, "Applitools API Key"
  c.option '--showLogs showLogs', String, "Display Applitools Logs"
  c.option '--matchLevel matchLevel', String, "Set match level to one of 'strict, layout, or content'. Default: strict"
  c.option '--server Server', String, "Set Applitools server url. Default: https://eyes.applitools.com"
  c.option '--proxy Proxy', String, "Set proxy address"
  c.option '--baseline Baseline', String, "Set your baseline name"
  c.option '--batchName BatchName', String, "Set your batch (folder) name"
  c.option '--batchId BatchId', String, "Set a batch ID. If you want to put images into an existing batch you can set this ID. e.g. 1234"
  c.option '--hostApp', String, "Set Host-app identifier for the screens under test"
  c.option '--hostOs', String, "Set OS identifier for the screens under test"
  # c.option '--branch', String, "Set branch name"
  # c.option '--parentBranch', String, "Set parent branch name, optional when working with branches"
  c.action do |args, options|
    options.default \
    :outdir => Dir.pwd,
    :keep => false,
    :matchLevel => 'strict',
    :server => 'https://eyes.applitools.com',
    :showLogs => false,
    :apiKey => ENV['APPLITOOLS_API_KEY'],
    :appName => options.platform,
    :baseline => nil,
    :batchName => options.appName,
    :hostApp => nil,
    :hostOs => nil
        
    [:testName, :apiKey].each do |o|
      if options.default[o].nil?
        puts "\n--#{o.to_s} is required... Please set it before running!\n".red
        abort
      end
    end
    
    match_levels = ['strict', 'layout', 'content']
    unless match_levels.include? options.matchLevel
      puts "You entered an incorrect match level. Please choose any of these: #{match_levels}"
      abort
    end
    
    options.batchId = options.batchId.to_i if options.batchId
    
    Applitoolz.new(options.default).upload_to_applitools
  end
end

command :log do |c|
  c.syntax = 'flick log [options]'
  c.summary = 'Get device log output'
  c.description = c.summary
  c.example 'description', "flick log -a start -p ios -o /logs -n myLog\n    flick log -a stop -p ios"
  c.option '-a', '--action ACTION', String, 'Set action: start or stop'
  c.option '-p', '--platform PLATFORM', String, 'Set platform: android or ios'
  c.option '-u', '--udid UDID', String, 'Set device UDID.'
  c.option '-n', '--name NAME', String, "Set name of output file. Default: UDID"
  c.option '-o', '--outdir OUTDIR', String, "Set output directory. Default is #{Dir.pwd}"
  c.action do |args, options|
    options.default \
    :outdir => Dir.pwd #defaults to save in current directory.
    Log.new(options.default).run
  end
end

command :info do |c|
  c.syntax = 'flick info [options]'
  c.summary = 'Get device information'
  c.description = c.summary
  c.example 'description', "flick info -p android\n    flick info -p ios"
  c.option '-p', '--platform PLATFORM', String, 'Set platform: android or ios'
  c.option '-u', '--udid UDID', String, 'Set device UDID.'
  c.option '-s', '--save SAVE', 'Save device info to a file.'
  c.option '-o', '--outdir OUTDIR', String, "Save device info to file. Default is #{Dir.pwd}"
  c.action do |args, options|
    options.default \
    :save => false,
    :outdir => Dir.pwd #defaults to save in current directory.
    Info.new(options.default).info
  end
end

command :manager do |c|
  c.syntax = 'flick manager [options]'
  c.summary = 'Manage apps on devices'
  c.description = c.summary
  c.example 'description', "flick manager -a install -p android -f ~/my-awesome-app.apk\n    flick manager -a uninstall -p ios -n com.viber"
  c.option '-a', '--action ACTION', String, 'Set action: install or uninstall'
  c.option '-p', '--platform PLATFORM', String, 'Set platform: android or ios'
  c.option '-u', '--udid UDID', String, 'Set device UDID.'
  c.option '-f', '--file FILE', String, 'Set the apk or app file location path.'
  c.option '-n', '--name NAME', String, 'Set the package name.'
  c.action { |args, options| Manager.new(options.default).run }
end

command :vitals do |c|
  c.syntax = 'flick vitals [options]'
  c.summary = 'Android Only! Get apps and device vitals - App Memory Used, App CPU %. System Stats: (User, System, IQW, IRQ)'
  c.description = c.summary
  c.example 'description', "flick vitals -p android -n com.viber"
  c.option '-p', '--platform PLATFORM', String, 'Set platform: android or ios'
  c.option '-n', '--name NAME', String, 'Set the package name.'
  c.option '-u', '--udid UDID', String, 'Set device UDID.'
  c.action { |args, options| Vitals.new(options.default).vitals }
end
